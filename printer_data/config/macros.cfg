[homing_override]

set_position_z: 0           # Set the Z position to 0 after homing
gcode:
  _LED_HOMING
  {% if not 'Z' in params and not 'Y' in params and 'X' in params %}              # Home X
  
    G90                     # Set to absolute positioning mode
    G0 Z10 F1200            # Move Z axis to 10mm above the bed at 1200 mm/min
    # {% if printer.toolhead.homed_axes != "y" %} # NEVER HOME X without Y homed first!
    #   G28 Y
    # {% endif %}
    {% if printer.toolhead.position.y > 60 %}  #make sure it won't hit the front motors
      G28 Y
    {% endif %}
    G28 X
  
  {% elif not 'Z' in params and not 'X' in params and 'Y' in params %}            # Home Y
  
    G90                     # Set to absolute positioning mode
    G0 Z10 F1200            # Move Z axis to 10mm above the bed at 1200 mm/min 
    G28 Y
  
  {% elif not 'Z' in params and 'X' in params and 'Y' in params %}                # Home XY
  
    G90                     # Set to absolute positioning mode
    G0 Z10 F1200            # Move Z axis to 10mm above the bed at 1200 mm/min
    G28 Y
    G28 X
  
  {% elif 'Z' in params and not 'X' in params and not 'Y' in params %}            # Home Z
    # {% if printer.extruder.temperature >= 150 %}          # wipe only if nozzle is hot
    #   WIPE
    # {% endif %}
    G1 X150 Y150 F7200      # Move to a specific coordinate (125, 125) at 7200 mm/min
    G28 Z 
  {% else %}                                                                      # Home XYZ
    G90                     # Set to absolute positioning mode
    G0 Z10 F1200            # Move Z axis to 10mm above the bed at 1200 mm/min
    G28 Y
    G28 X
    {% if printer.extruder.temperature >= 150 %}          # wipe only if nozzle is hot
      WIPE
    {% endif %}
    G1 X150 Y150 F7200      # Move to a specific coordinate (125, 125) at 7200 mm/min
    G28 Z 
  
  {% endif %}
  G0
  _LED_READY

axes: xyz

########################################################################################################
#                           AUTO PREP
########################################################################################################

[gcode_macro AUTO_PREP]
description: "Prepare the printer"
variable_MESH: 0
gcode: 
  {% set PRINT = params.PRINT | default(0) | int %}                          # Set to 1 if this is before a print.
  {% set FORCE = params.FORCE | default(0) | int %}
  {% set MESH = params.MESH | default(0) | int %}                            # If MESH is not passed, set it to 0 (no mesh probing)
  {% set BED_TEMP = params.BED | default(0.0) | float %}                  # Target bed temperature
  {% set EXTRUDER_TEMP = params.EXTRUDER | default(0.0) | float %}        # Target nozzle temperature
    

  RESET_SPEEDS
  
  SET_DISPLAY_TEXT MSG=" "                                 # clear message
  _LED_BUSY
  # SET_GCODE_OFFSET Z=0                                     # Reset Z offset

  {% if PRINT == 1 %} # for print start
    # {% set BED_TEMP = params.BED|int %}                  # Target bed temperature
    # {% set EXTRUDER_TEMP = params.EXTRUDER|int %}        # Target nozzle temperature
    # SET_DISPLAY_TEXT MSG="Print Prep: Preheating..."                # Display message
    SET_DISPLAY_TEXT MSG="Preating Bed: {BED_TEMP}°C Extruder: {EXTRUDER_TEMP}°C"     # Display bed heating message
    RESPOND TYPE=command MSG='Preating Bed: {BED_TEMP}°C Extruder: {EXTRUDER_TEMP}°C' 

    _LED_HEATING
    M104 S170                                           ; Preheat nozzle to 150°C (non-blocking)
    M140 S{BED_TEMP}                                  ; Set bed target temperature (non-blocking)
  {% else %} # no print start
    SET_DISPLAY_TEXT MSG="Auto Prep..."                   # message
    RESPOND TYPE=command MSG='Auto Prep starting...' 
    TURN_OFF_HEATERS
  {% endif %}
  
  {% if printer.toolhead.homed_axes != "xyz" or FORCE == 1 %}
    SET_DISPLAY_TEXT MSG="Homing XYZ..."                     # Display message
    RESPOND TYPE=command MSG='Homing XYZ...'
    G28
  {% endif %}

  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}  # Bed center X
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}  # Bed center Y
  
  {% if not printer.motors_sync.applied or FORCE == 1 %}
    SET_DISPLAY_TEXT MSG="Syncing Motors..."                # Display message
    RESPOND TYPE=command MSG='Syncing Motors...'
    _LED_BUSY
    SYNC_MOTORS
    # SET_DISPLAY_TEXT MSG="Syncing Motors done."              # Display message
  {% endif %}
  
  PARK
  M104 S150                                                # Preheat nozzle to 150°C (non-blocking)
    
  {% if PRINT == 1 %}                                   # Waiting for bed printing temperature
    SET_DISPLAY_TEXT MSG="Heating Bed: {BED_TEMP}°C"     # Display bed heating message
    RESPOND TYPE=command MSG='Heating Bed: {BED_TEMP}'
    # G1 X{x_wait} Y{y_wait} Z15 F9000                       # Move to bed center
    _LED_HEATING
    M190 S{BED_TEMP}                                     # Wait for bed to reach target temperature
    G28 Z
  {% endif %}

  SET_DISPLAY_TEXT MSG="Leveling..."                       # Display leveling message
  RESPOND TYPE=command MSG='Leveling...'
  _LED_MESHING
  G1 X{x_wait} Y{y_wait} Z15 F9000                         # Move to bed center
  Z_TILT_ADJUST                                            # Perform Z tilt adjustment
  G28 Z                                                    # Re-home Z after adjustment
  SET_DISPLAY_TEXT MSG="Leveling done."                    # Display leveling message

  {% if PRINT == 1 %}                                   # Adaptive Bed Mesh
    _LED_MESHING
    SET_DISPLAY_TEXT MSG="Probing new Bed Mesh..."         # Display leveling message
    BED_MESH_CALIBRATE ADAPTIVE=1
  {% elif MESH == 1 %}
    _LED_MESHING
    SET_DISPLAY_TEXT MSG="Probing new Bed Mesh..."         # Display leveling message
    RESPOND TYPE=command MSG='Probing new Bed Mesh...'
    BED_MESH_CALIBRATE  PROFILE="default"                  # Perform bed mesh calibration and save it as default
  {% else %}
    {% if printer.bed_mesh.profile_name %}                 # Check loaded bed mesh and load default if nothing is loaded
        SET_DISPLAY_TEXT MSG="Mesh already loaded"
    {% else %}
        SET_DISPLAY_TEXT MSG="Loading default mesh..."
        BED_MESH_PROFILE LOAD=default
    {% endif %}
    SET_DISPLAY_TEXT MSG="Bed Mesh done"
    # SET_DISPLAY_TEXT MSG="Bed Mesh done."
  {% endif %}

M190 S{BED_TEMP}                                     # Wait for bed to reach target temperature

  # G28 Z                                                   # Re-home Z after adjustment
  # M104 S170                                               # Heatup to extrude temp
  
  WIPE                                                    # wipe
  # G91                                                     # Switch to relative positioning
  # G0 E-10                                                 # Retract a little
  SET_DISPLAY_TEXT MSG="Calibrating Z Offset..."          # Display Z offset calibration message
  RESPOND TYPE=command MSG='Calibrating Z Offset...'
  _LED_CALIBRATING_Z
  CARTOGRAPHER_TOUCH                                      # Calibrate Z offset
  # G0 E10                                                  # Extrude a little
  G90                                                     # Switch to absolute positioning
  G92 E0                                                # zero the extruder
  PARK

  # {% if PRINT != 1 %}                                   # Waiting for bed printing temperature
  SET_DISPLAY_TEXT MSG=" "
  _LED_BRIGHT
  # {% endif %}

[gcode_macro AUTO_PREP_MESH]
gcode: 
  AUTO_PREP MESH=1
  TURN_OFF_HEATERS

[gcode_macro SOAK]
gcode:
  _LED_HEATING
  VENT
  HEAT_SOAK HEATER='heater_bed' TARGET=120 SOAKER='temperature_sensor -_Galileo2' SOAK_TEMP=40 

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}

########################################################################################################
#                           PRINT MACROS
########################################################################################################

[gcode_macro PRINT_START]
gcode:
  SET_DISPLAY_TEXT MSG="Print Start"     # clear message
  _LED_BUSY

  {% set target_bed = params.BED|int %}                  # Target bed temperature
  {% set target_extruder = params.EXTRUDER|int %}        # Target nozzle temperature
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}  # Bed center X
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}  # Bed center Y

  AUTO_PREP PRINT=1 BED={ target_bed } EXTRUDER={ target_extruder } #Auto Prep macro with print options
  
  SET_DISPLAY_TEXT MSG="Heating Nozzle: {target_extruder}°C" # Display nozzle heating message
  _LED_HEATING_EXTRUDER
  # G1 X{x_wait} Y{10} Z15 F9000                         # Move to the front
  M109 S{target_extruder}                                # Heat nozzle to target temperature
  WIPE

  SET_DISPLAY_TEXT MSG="Preparing to Print..."           # Display preparation message
  G0 X{x_wait - 50} Y4 F10000                            # Move to primeline start point
  G0 Z0.4                                                # Raise Z to 0.4mm
  G91                                                    # Switch to relative positioning
  G1 X100 E20 F1000                                      # Extrude primeline
  G90                                                    # Switch back to absolute positioning
  SET_DISPLAY_TEXT
  _LED_PRINTING

#--------------------------------------------------------------------
[gcode_macro PRINT_END]
gcode:
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

  SAVE_GCODE_STATE NAME=STATE_PRINT_END

  M400                                                  # wait for buffer to clear
  G92 E0                                                # zero the extruder
  G1 E-20.0 F3600                                       # retract filament
  
  TURN_OFF_HEATERS
  VENT
  G90                                                   # absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000               # move nozzle to remove stringing
  G0 X{150} Y{th.axis_maximum.y - 2} F3600              # park nozzle at rear
  WIPE
  M107                                                  # turn off fan
  FANS_OFF

  
  BED_MESH_CLEAR
  RESET_SPEEDS
  
  _LED_PART_READY


  # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
  # command pair is to restore the printer's coordinate system
  # and speed settings since the commands above change them.
  # However, to prevent any accidental, unintentional toolhead
  # moves when restoring the state, explicitly set MOVE=0.
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

  UPDATE_DELAYED_GCODE ID=PRINT_DONE DURATION=30


[delayed_gcode PRINT_DONE]
gcode: 
  RAINBOW
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=1800
  
########################################################################################################
#                           Filament Loading
########################################################################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  50

gcode:
    # {% set speed = params.SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    # G1 E25 F{speed} # to catch the lilament
    G1 E10 F300 # to catch the lilament
    G1 E50 F600 # fast-load
    G1 E25 F300 # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  10
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state


########################################################################################################
########################################################################################################

[gcode_macro RESTORE_TRAVEL_SPEED]
gcode:
    ## Get max_velocity value from config
    {% set re_speed = printer.toolhead.max_velocity %}
    M220 S100

    ## Optionally, ignore the above and just set a manual value in mm/s
    ## if one is supplied as a parameter
    #{% set re_speed = params.SPEED|default(re_speed)|int %}

    ## Multiply that mm/s value by 60 to get mm/min
    {% set re_speed = re_speed * 60 %}

    ## Temporarily set relative positioning mode
    G91
    ## Apply the value in the gcode processor
    G0 X0 Y0 Z0 F{re_speed}
    ## Return to absolute positioning
    G90

[gcode_macro move_to_front]
gcode:
  SAVE_GCODE_STATE NAME=STATE_MOVE_TO_FRONT
  G0 Z150 F1200
  G0 X150 Y0 F7200
  RESTORE_GCODE_STATE NAME=STATE_MOVE_TO_FRONT MOVE=0

[gcode_macro move_to_center]
gcode:
  SAVE_GCODE_STATE NAME=STATE_MOVE_TO_FRONT
  G0 X150 Y150 F7200
  G0 Z10 F1200
  RESTORE_GCODE_STATE NAME=STATE_MOVE_TO_FRONT MOVE=0

[gcode_macro AWD_SYNC]
gcode:
  TURN_OFF_HEATERS                                 # turn bed / hotend off
  FANS_OFF                                         # turn off fans
  SYNC_MOTORS                                      # Sync motors
  
[gcode_macro INPUT_SHAPER]
gcode:
  SAVE_GCODE_STATE NAME=STATE_SHAPER               # Save current state for sync motors
  TURN_OFF_HEATERS                                 # turn bed / hotend off
  FANS_OFF                                         # turn off fans
  SHAPER_CALIBRATE                                 # Input Shaper Calibration
  RESTORE_GCODE_STATE NAME=STATE_SHAPER            # Restore saved state after adjustment

[gcode_macro FANS_OFF]
gcode:
  SET_FAN_SPEED FAN=Part_Cooling_Blower SPEED=0
  SET_FAN_SPEED FAN=Big_Blower SPEED=0
  SET_FAN_SPEED FAN=Fume_Pack SPEED=0

[gcode_macro VENT]
gcode:
#   SET_FAN_SPEED FAN=Part_Cooling_Blower SPEED=0
  SET_FAN_SPEED FAN=Big_Blower SPEED=255
  SET_FAN_SPEED FAN=Fume_Pack SPEED=255

[gcode_macro RESET_SPEEDS]
gcode:
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
  SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
  M220 S100
  M221 S100

# [gcode_macro POWER_OFF_PRINTER]
# gcode:
#   LED_OFF
#   FANS_OFF
#   {action_call_remote_method("set_device_power", device="printer", state="off")}

[gcode_macro POWER_OFF_PRINTER]
gcode:
    LED_OFF
    FANS_OFF
    {action_call_remote_method("set_device_power",
                                device="Voron_Trident",
                                state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
    {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
    {% endif %}
